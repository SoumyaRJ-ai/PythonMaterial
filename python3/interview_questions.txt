Python Interview Questions  & their answers
============================================
Q1) What is the purpose of python decorators, and how can they be used?
Ans) Generally, functions are used for code reusability.
    Decorators are the functions used to handle redundant code among
    multiple functions.

    WITHOUT decorator:
    ------------------
    def add(a, b):
        try:
            result = a + b
        except Exception as ex:
            return ex
        else:
            return result

    def div(n1, n2):
        try:
            result = n1 / n2
        except Exception as ex:
            return ex
        else:
            return result

    WITH decorator:
    ---------------

    def handle_expection(func):
        def inner(v1, v2):
            try:
                result = func(v1, v2)
                # print(f'{func =}')
            except Exception as ex:
                return ex
            else:
                return result
        return inner

    @handle_expection
    def add(a, b):
        return a + b

    @handle_expection
    def div(n1, n2):
        return n1 / n2

Q2)	What is the purpose of the property decorator?
Ans) In a class, to access a method as a variable, we need property decorator.
    property decorator comes with attributes:
         getter()  --> To retrieve a method as a variable
         setter()  --> To set the value to the method
         deletter()--> Executes when "del" operator is invoked against this method

Q3) What is the purpose of PYTHONPATH, and how do you modify it?
Ans) It is an environment variable, storing directory where python looks for
    modules & packages. For recent installations, it will be automatically set, during
    python installation.

Q4) Which builtin types are mutable/immutable?
Ans) Mutable objects - objects which support changes(add/modify/delete) on them
        Ex: list, dict, set , ordinary class instance
     Immutable objects - objects which doesnt support changes on them
        Ex: tuple, frozenset, instance of class with __slots__ defined

Q5) What is the purpose of *args and **kwargs?
Ans) variadic functions - functions which support any number of arguments.
    *args - defining it in function definition means to take any no. of arguments
           in function calls; all given elements will be part of a tuple.
    **kwargs - defining it in function definition means to take any no. of keyword
           arguments in function calls; all given elements will be part of dictionary.

    EXAMPLE:
    ===========
        def my_func(arg1, *arg2, **arg3):
            pass

        my_func(10, 1, '1', 'a', a='apple', b=True)

    Here,  arg1 (mandatory argument) will store 10
           arg2 (variable argument)  will store (1, '1', 'a')
           arg3 (variable keyword argument) will store {'a': 'apple', 'b': True}

Q6) How do you get current working dir in python?
Ans) using below code:
        import os
        print("current working directory:", os.getcwd())

Q7) How do you use ABCs? What contexts are they suitable for?
Ans) ABC - abstract base class
    In project, when we want to create child classes, which should all have
    same methods (like a template of methods), those abc classes will be
    created and inherited in all the child classes.
    This will ensure all the child classes with have same method names.

Q8) Whatâ€™s a list/dict comprehension? How do you create them? How do you filter items?
Ans) comprehension is writing the for loop code in single line.
    Example:
        even_nums = [num for num in range(10) if num % 2 == 0] # list comprehension
        even_nums = {num for num in range(10) if num % 2 == 0} # set comprehension
        even_nums = {num:num * num for num in range(10) if num % 2 == 0} # dict comprehension

    As shown above, if the elements are stored in key, value pairs and placed within {} braces,
    it is a dictionary comprehension.

Q9) How do you create a nested comprehension? How does it compare to for loops?
Ans) Nexted comprehension is placement of multiple for loops within same statement.
    Example:
        Method 1 (traditional):
            values = []
            for c in "aeiou":
                for num in range(5):
                    if num % 2 == 0:
                        values.append(f'{c}:{num}')
        Method 2 (using comprehensions):
            values = [f'{c}:{num}' for c in "aeiou" for num in range(5) if num % 2 == 0]

Q10) How do you sort a list? How about a list of dicts by one of the dict fields?
     How about multiple fields?
Ans) A list can be sorted using list.sort() attribute, or using sorted() builtin function
       list.sort() - sorting with be inline on same object
       sorted(list)- new list object is created with sorted values

    Example:
        my_list = [{'name': 'John', 'age': 12, 'sex': 'male'},
                    {'name': 'Jessi', 'age': 32, 'sex': 'female'},
                    {'name': 'Jack', 'age': 34, 'sex': 'male'}]

        sorted(my_list, key=lambda obj: obj['name'])

Q11) Given a list of dictionaries with keys "firstName" and "lastName", return the
     same list in ascending order of "lastName", then in ascending order of
     "firstName" for equal last names.
Ans) sorted(my_list, key=lambda dt: (dt['lastName'], dt['firstName'])

Q12) Given a string, return a dictionary where the keys are characters in the
    string and the values count the number of occurrences of the character.
Ans)
    given_string = "abbbabababbabakjhkjassa"

    METHOD 1: using setdefault

        counts = {}
        for each_char in given_string:
            counts.setdefault(each_char, 0)
            counts[each_char] += 1
        print(counts)

    METHOD 2: using collections.defaultdict

        from collections import defaultdict
        counts = defaultdict(int)
        for each_chr in given_string:
            counts[each_chr] += 1
        print(counts)

Q13) += operation on list of strings
Ans)
    >>> a = ['yes']
    >>> a + 'no'
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: can only concatenate list (not "str") to list
    >>>
    >>> a += 'no'
    >>> a
    ['yes', 'n', 'o']
    >>>
Q14) Global namespace leak in python2
Ans)
    In Python2.7,
        num = 5
        print num # 5
        mylist = [num for num in range(9)]
        print num # 8
    In python3,
        num = 5
        print(num) # 5
        mylist = [num for num in range(9)]
        print(num) # 5

Q15) Problem with appending to the iterating list
Ans)
    >>> x = ['ab', 'cd']
    >>> for i in x:
    ...     x.append(i.upper())
    ... print(x)
    Traceback (most recent call last):
    File "<stdin>", line 2, in <module>
    MemoryError

Q16)
    def foo(x):
		x[0] = ['def']
		x[1] = ['abc']
		return id(x)

    q = ['abc', 'def']
    print(id(q) == foo(q))
Ans) True

Q17) while using python in interactive mode, default secondary prompt for continuation lines

Q18)Identify 10 to the power of 3
	10 ** 3
	10 ^ 3
	10 (3)
	10 * 3

Q19)In interactive mode, which variable holds the value of last printed expression?
	?
	-
	_
	*

Q20) name = 'Python'. what is print(name[-1])
	Invalid Syntax
	End-of-lines
	P
	n

Q21) which of followibg statements can be used to force a particular exception to occur?
	raise
	throw
	throws
	except

Q22) which of the following python utility programs is used to install or remove packages ?
	sudo
	yum
	pip
	apt

Q23)"""
	Questions to ask yourself: what is lambda, what does range create, how does element removal work in python
	"""
	odd = lambda x: bool(x % 2)
	numbers = [n for n in range(10) if odd()  if  not odd(n)]


	for i in range(len(numbers)):
		if odd(numbers[i]):
			del numbers[i]

	print(numbers)

Q24) """
	Questions to ask yourself: How does inheritance work, what is the difference between a class and an instance of a class
	"""
	class Foo(object):
		def __init__(self):
			self.x = 5
			self.bubbles = 2

	class Buzz(Foo):
		def __init__(self):
			Foo.__init__(self)
			self.bubbles = "Bubbles"

	foo = Foo()
	print(foo.x)
	print(foo.bubbles)

	buzz = Buzz()
	print(buzz.x)
	print(buzz.bubbles)

	foo.x = 22
	print(buzz.x)

	print(Foo.bubbles)
	Foo.bubbles = "dasf"
	print(foo.bubbles)
	print(foo.x)

Q25) """Questions to ask yourself: When are lists instanciated and how are they passed"""
	x = [[]] * 6       [[], p[/..]]
	x[0].append('Na')  [  ['Na'], v, ['Na'], ['Na'], ['Na']     ]

	x.append("BATMAN!!!")  [  ['Na'], v, ['Na'], ['Na'], ['Na']   "BATMAN"  ]

	print(x)

Q26)  """Questions to ask yourself: Is something obvious distracting you from something thats not"""
	x = [a, b, c]
	value = x[3]

Q27) """ Questions to ask yourself: How do data types interact with each other """
	print(5/2)
	print(5.0/2)
	print(5*1.0/2)

Q28) """You have an array of 99 unique numbers from 1 to 100
	   How do you determine which number from 1-100 is missing?
	   What is the run time?
	"""
Q29) What is the result of this program:
    x = 1
    y = 0
    z = 0
    result = 2
    try:
        z = z + 1
        result = x / y
        z = z + 1
    except ZeroDivisionError:
        z = z + result
    else:
        z = z + 1
    finally:
        z = z + 1
    z = z + 1
    print(z)
Ans) 5

Q30) What is the result of this program:
    z = 5
    x = '456'
    while z > -1:
        y = x
        if y in ('1', '2', '3') or len(y) > 1:
            break
        x = x + y
        if y in ('4', '5', '6'):
            continue
        z = z - 1
    print(z)
Ans) 5

Q31) What is the result of this program:
    from string import *
    method = "METHODS"


    def x(methods):
        method = str.swapcase(methods)
        print(("%(method)s" % locals()))


    methods = str.swapcase(method[:-1])
    x(methods)
Ans) METHOD


Q32) What statement best describes the gang of four design patterns called memento and observer

    a) Memento captures and restores and objects internal state whereas observer notifies multiple classes of changes
    b)   Momento Alterss and objects behaviour when its state changes. Observer encapsulates an algorithm inside a class
    c) Mamunto defers the exact steps of an algorithm to a subclass. Observer defines a new
Ans) a

Q33) Which relationship best illustrates an abstract concrete class relationship

    a) Cat kitten
    b) Planet Moon
    c) Truck window
    d) Colour red
Ans) a

Q34) What is the reference to an object
    a) It is a shallow pointer that contains address of an object
    b) It is a physical address of an object
    c) It is the address where the variables and methods of an object are stored
    d) It is address of a variable only; not the methods of an object
Ans) a


Does Python have OOps concepts?
Explain how to delete a file in Python?
Explain how you can set up the Database in Django
Explain Python Functions?
How are arguments passed by value or by reference?
How can we make forms in Python?
How can you generate random numbers in Python?
How do you copy an object in Python?
How do you debug a Python program?
How do you insert an object at a given index in Python?
How is memory managed in Python?
How is Python an interpreted language?
How to comment multiple lines in python?
How to create a Unicode string in Python?
How to install Python on Windows and set path variable?
How to remove leading whitespaces from a string in the Python?
How to remove values to a python array?
How to remove whitespaces from a string in Python?
How Will You Understand Dimensions and Measures?
Is Python a compiled language or an interpreted language?
What are decorators in Python?
What are Dict and List comprehensions?
What are functions in Python?
What are global, protected and private attributes in Python?
What are iterators in Python?
What are modules and packages in Python?
What are negative indexes and why are they used?
What are python modules?
What are Pythonâ€™s dictionaries?
What are the applications of Python?
What are the common built-in data types in Python?
What are the different file processing modes supported by Python?
What are unittests in Python?
What do you mean by Python literals?
What is a dictionary in Python?
What is a dynamically typed language?
What is a function in Python programming?
What is a negative index in Python?
What is docstring in Python?
What is GIL in Python?
What is monkey patching?
What is Python?
What is self in Python?
What is slicing in Python?
What is swapcase function in Python?
What is the difference between an array and a list?
What is the difference between NumPy and SciPy?
What is the difference between Python Arrays and lists?
What is the difference between range & xrange?
What is the maximum possible length of an identifier?
What is the pass statement in Python?
What is the process of compilation and linking in python?
What is the usage of enumerate () function in Python?
What is the use of break statement?
What is the Use of Dual-axis? How Do You Create One?
What is type conversion in Python?
What type of language is python? Programming or scripting?
Which one of these is floor division?
